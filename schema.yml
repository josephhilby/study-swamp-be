openapi: 3.0.3
info:
  title: Study Swamp API
  version: 1.0.0
  description: To-Do
paths:
  /v1/attendees/:
    get:
      operationId: v1_attendees_list
      parameters:
      - name: filter[search]
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - name: page[number]
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page[size]
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: sort
        required: false
        in: query
        description: '[list of fields to sort by](https://jsonapi.org/format/#fetching-sorting)'
        schema:
          type: string
      tags:
      - v1
      security:
      - basicAuth: []
      responses:
        '200':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/PaginatedAttendeeList'
          description: ''
    post:
      operationId: v1_attendees_create
      tags:
      - v1
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/AttendeeRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/AttendeeRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AttendeeRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AttendeeRequest'
        required: true
      security:
      - basicAuth: []
      responses:
        '201':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Attendee'
          description: ''
  /v1/attendees/{id}/:
    get:
      operationId: v1_attendees_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this attendee.
        required: true
      tags:
      - v1
      security:
      - basicAuth: []
      responses:
        '200':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Attendee'
          description: ''
    put:
      operationId: v1_attendees_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this attendee.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/AttendeeRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/AttendeeRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AttendeeRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AttendeeRequest'
        required: true
      security:
      - basicAuth: []
      responses:
        '200':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Attendee'
          description: ''
    patch:
      operationId: v1_attendees_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this attendee.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/PatchedAttendeeRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedAttendeeRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedAttendeeRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedAttendeeRequest'
      security:
      - basicAuth: []
      responses:
        '200':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Attendee'
          description: ''
    delete:
      operationId: v1_attendees_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this attendee.
        required: true
      tags:
      - v1
      security:
      - basicAuth: []
      responses:
        '204':
          description: No response body
  /v1/awards/:
    get:
      operationId: v1_awards_list
      parameters:
      - name: filter[search]
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - name: page[number]
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page[size]
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: sort
        required: false
        in: query
        description: '[list of fields to sort by](https://jsonapi.org/format/#fetching-sorting)'
        schema:
          type: string
      tags:
      - v1
      security:
      - basicAuth: []
      responses:
        '200':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/PaginatedAwardList'
          description: ''
    post:
      operationId: v1_awards_create
      tags:
      - v1
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/AwardRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/AwardRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AwardRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AwardRequest'
        required: true
      security:
      - basicAuth: []
      responses:
        '201':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Award'
          description: ''
  /v1/awards/{id}/:
    get:
      operationId: v1_awards_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this award.
        required: true
      tags:
      - v1
      security:
      - basicAuth: []
      responses:
        '200':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Award'
          description: ''
    put:
      operationId: v1_awards_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this award.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/AwardRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/AwardRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AwardRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AwardRequest'
        required: true
      security:
      - basicAuth: []
      responses:
        '200':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Award'
          description: ''
    patch:
      operationId: v1_awards_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this award.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/PatchedAwardRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedAwardRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedAwardRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedAwardRequest'
      security:
      - basicAuth: []
      responses:
        '200':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Award'
          description: ''
    delete:
      operationId: v1_awards_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this award.
        required: true
      tags:
      - v1
      security:
      - basicAuth: []
      responses:
        '204':
          description: No response body
  /v1/group_comments/:
    get:
      operationId: v1_group_comments_list
      parameters:
      - name: filter[search]
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - name: page[number]
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page[size]
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: sort
        required: false
        in: query
        description: '[list of fields to sort by](https://jsonapi.org/format/#fetching-sorting)'
        schema:
          type: string
      tags:
      - v1
      security:
      - basicAuth: []
      responses:
        '200':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/PaginatedGroupCommentList'
          description: ''
    post:
      operationId: v1_group_comments_create
      tags:
      - v1
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/GroupCommentRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/GroupCommentRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/GroupCommentRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/GroupCommentRequest'
        required: true
      security:
      - basicAuth: []
      responses:
        '201':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/GroupComment'
          description: ''
  /v1/group_comments/{id}/:
    get:
      operationId: v1_group_comments_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this group comment.
        required: true
      tags:
      - v1
      security:
      - basicAuth: []
      responses:
        '200':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/GroupComment'
          description: ''
    put:
      operationId: v1_group_comments_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this group comment.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/GroupCommentRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/GroupCommentRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/GroupCommentRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/GroupCommentRequest'
        required: true
      security:
      - basicAuth: []
      responses:
        '200':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/GroupComment'
          description: ''
    patch:
      operationId: v1_group_comments_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this group comment.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/PatchedGroupCommentRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedGroupCommentRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedGroupCommentRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedGroupCommentRequest'
      security:
      - basicAuth: []
      responses:
        '200':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/GroupComment'
          description: ''
    delete:
      operationId: v1_group_comments_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this group comment.
        required: true
      tags:
      - v1
      security:
      - basicAuth: []
      responses:
        '204':
          description: No response body
  /v1/groups/:
    get:
      operationId: v1_groups_list
      parameters:
      - name: filter[search]
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - name: page[number]
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page[size]
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: sort
        required: false
        in: query
        description: '[list of fields to sort by](https://jsonapi.org/format/#fetching-sorting)'
        schema:
          type: string
      tags:
      - v1
      security:
      - basicAuth: []
      responses:
        '200':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/PaginatedGroupList'
          description: ''
    post:
      operationId: v1_groups_create
      tags:
      - v1
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/GroupRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/GroupRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/GroupRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/GroupRequest'
        required: true
      security:
      - basicAuth: []
      responses:
        '201':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Group'
          description: ''
  /v1/groups/{id}/:
    get:
      operationId: v1_groups_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this group.
        required: true
      tags:
      - v1
      security:
      - basicAuth: []
      responses:
        '200':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Group'
          description: ''
    put:
      operationId: v1_groups_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this group.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/GroupRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/GroupRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/GroupRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/GroupRequest'
        required: true
      security:
      - basicAuth: []
      responses:
        '200':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Group'
          description: ''
    patch:
      operationId: v1_groups_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this group.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/PatchedGroupRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedGroupRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedGroupRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedGroupRequest'
      security:
      - basicAuth: []
      responses:
        '200':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Group'
          description: ''
    delete:
      operationId: v1_groups_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this group.
        required: true
      tags:
      - v1
      security:
      - basicAuth: []
      responses:
        '204':
          description: No response body
  /v1/locations/:
    get:
      operationId: v1_locations_list
      parameters:
      - name: filter[search]
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - name: page[number]
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page[size]
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: sort
        required: false
        in: query
        description: '[list of fields to sort by](https://jsonapi.org/format/#fetching-sorting)'
        schema:
          type: string
      tags:
      - v1
      security:
      - basicAuth: []
      responses:
        '200':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/PaginatedLocationList'
          description: ''
    post:
      operationId: v1_locations_create
      tags:
      - v1
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/LocationRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/LocationRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LocationRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/LocationRequest'
        required: true
      security:
      - basicAuth: []
      responses:
        '201':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Location'
          description: ''
  /v1/locations/{id}/:
    get:
      operationId: v1_locations_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this location.
        required: true
      tags:
      - v1
      security:
      - basicAuth: []
      responses:
        '200':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Location'
          description: ''
    put:
      operationId: v1_locations_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this location.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/LocationRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/LocationRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LocationRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/LocationRequest'
        required: true
      security:
      - basicAuth: []
      responses:
        '200':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Location'
          description: ''
    patch:
      operationId: v1_locations_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this location.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/PatchedLocationRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedLocationRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedLocationRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedLocationRequest'
      security:
      - basicAuth: []
      responses:
        '200':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Location'
          description: ''
    delete:
      operationId: v1_locations_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this location.
        required: true
      tags:
      - v1
      security:
      - basicAuth: []
      responses:
        '204':
          description: No response body
  /v1/meeting_comments/:
    get:
      operationId: v1_meeting_comments_list
      parameters:
      - name: filter[search]
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - name: page[number]
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page[size]
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: sort
        required: false
        in: query
        description: '[list of fields to sort by](https://jsonapi.org/format/#fetching-sorting)'
        schema:
          type: string
      tags:
      - v1
      security:
      - basicAuth: []
      responses:
        '200':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/PaginatedMeetingCommentList'
          description: ''
    post:
      operationId: v1_meeting_comments_create
      tags:
      - v1
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/MeetingCommentRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/MeetingCommentRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MeetingCommentRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MeetingCommentRequest'
        required: true
      security:
      - basicAuth: []
      responses:
        '201':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/MeetingComment'
          description: ''
  /v1/meeting_comments/{id}/:
    get:
      operationId: v1_meeting_comments_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this meeting comment.
        required: true
      tags:
      - v1
      security:
      - basicAuth: []
      responses:
        '200':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/MeetingComment'
          description: ''
    put:
      operationId: v1_meeting_comments_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this meeting comment.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/MeetingCommentRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/MeetingCommentRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MeetingCommentRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MeetingCommentRequest'
        required: true
      security:
      - basicAuth: []
      responses:
        '200':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/MeetingComment'
          description: ''
    patch:
      operationId: v1_meeting_comments_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this meeting comment.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/PatchedMeetingCommentRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedMeetingCommentRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedMeetingCommentRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedMeetingCommentRequest'
      security:
      - basicAuth: []
      responses:
        '200':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/MeetingComment'
          description: ''
    delete:
      operationId: v1_meeting_comments_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this meeting comment.
        required: true
      tags:
      - v1
      security:
      - basicAuth: []
      responses:
        '204':
          description: No response body
  /v1/meetings/:
    get:
      operationId: v1_meetings_list
      parameters:
      - name: filter[search]
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - name: page[number]
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page[size]
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: sort
        required: false
        in: query
        description: '[list of fields to sort by](https://jsonapi.org/format/#fetching-sorting)'
        schema:
          type: string
      tags:
      - v1
      security:
      - basicAuth: []
      responses:
        '200':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/PaginatedMeetingList'
          description: ''
    post:
      operationId: v1_meetings_create
      tags:
      - v1
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/MeetingRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/MeetingRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MeetingRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MeetingRequest'
        required: true
      security:
      - basicAuth: []
      responses:
        '201':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Meeting'
          description: ''
  /v1/meetings/{id}/:
    get:
      operationId: v1_meetings_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this meeting.
        required: true
      tags:
      - v1
      security:
      - basicAuth: []
      responses:
        '200':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Meeting'
          description: ''
    put:
      operationId: v1_meetings_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this meeting.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/MeetingRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/MeetingRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MeetingRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MeetingRequest'
        required: true
      security:
      - basicAuth: []
      responses:
        '200':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Meeting'
          description: ''
    patch:
      operationId: v1_meetings_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this meeting.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/PatchedMeetingRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedMeetingRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedMeetingRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedMeetingRequest'
      security:
      - basicAuth: []
      responses:
        '200':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Meeting'
          description: ''
    delete:
      operationId: v1_meetings_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this meeting.
        required: true
      tags:
      - v1
      security:
      - basicAuth: []
      responses:
        '204':
          description: No response body
  /v1/members/:
    get:
      operationId: v1_members_list
      parameters:
      - name: filter[search]
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - name: page[number]
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page[size]
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: sort
        required: false
        in: query
        description: '[list of fields to sort by](https://jsonapi.org/format/#fetching-sorting)'
        schema:
          type: string
      tags:
      - v1
      security:
      - basicAuth: []
      responses:
        '200':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/PaginatedMemberList'
          description: ''
    post:
      operationId: v1_members_create
      tags:
      - v1
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/MemberRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/MemberRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MemberRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MemberRequest'
        required: true
      security:
      - basicAuth: []
      responses:
        '201':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Member'
          description: ''
  /v1/members/{id}/:
    get:
      operationId: v1_members_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this member.
        required: true
      tags:
      - v1
      security:
      - basicAuth: []
      responses:
        '200':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Member'
          description: ''
    put:
      operationId: v1_members_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this member.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/MemberRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/MemberRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MemberRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MemberRequest'
        required: true
      security:
      - basicAuth: []
      responses:
        '200':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Member'
          description: ''
    patch:
      operationId: v1_members_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this member.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/PatchedMemberRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedMemberRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedMemberRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedMemberRequest'
      security:
      - basicAuth: []
      responses:
        '200':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Member'
          description: ''
    delete:
      operationId: v1_members_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this member.
        required: true
      tags:
      - v1
      security:
      - basicAuth: []
      responses:
        '204':
          description: No response body
  /v1/users/:
    get:
      operationId: v1_users_list
      parameters:
      - name: filter[search]
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - name: page[number]
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page[size]
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: sort
        required: false
        in: query
        description: '[list of fields to sort by](https://jsonapi.org/format/#fetching-sorting)'
        schema:
          type: string
      tags:
      - v1
      security:
      - basicAuth: []
      responses:
        '200':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/PaginatedUserList'
          description: ''
    post:
      operationId: v1_users_create
      tags:
      - v1
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/UserRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRequest'
        required: true
      security:
      - basicAuth: []
      - {}
      responses:
        '201':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /v1/users/{id}/:
    get:
      operationId: v1_users_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - v1
      security:
      - basicAuth: []
      responses:
        '200':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    put:
      operationId: v1_users_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/UserRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRequest'
        required: true
      security:
      - basicAuth: []
      responses:
        '200':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    patch:
      operationId: v1_users_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/PatchedUserRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserRequest'
      security:
      - basicAuth: []
      responses:
        '200':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    delete:
      operationId: v1_users_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - v1
      security:
      - basicAuth: []
      responses:
        '204':
          description: No response body
components:
  schemas:
    Attendee:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        rsvp_type:
          allOf:
          - $ref: '#/components/schemas/RsvpTypeEnum'
          minimum: -2147483648
          maximum: 2147483647
        checked_in:
          type: boolean
        creator:
          type: boolean
        editor:
          type: boolean
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        user:
          type: integer
        meeting:
          type: integer
      required:
      - created_at
      - id
      - meeting
      - updated_at
      - user
    AttendeeRequest:
      type: object
      properties:
        rsvp_type:
          allOf:
          - $ref: '#/components/schemas/RsvpTypeEnum'
          minimum: -2147483648
          maximum: 2147483647
        checked_in:
          type: boolean
        creator:
          type: boolean
        editor:
          type: boolean
        user:
          type: integer
        meeting:
          type: integer
      required:
      - meeting
      - user
    Award:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        badge_type:
          allOf:
          - $ref: '#/components/schemas/BadgeTypeEnum'
          minimum: -2147483648
          maximum: 2147483647
        created_at:
          type: string
          format: date-time
          readOnly: true
        user:
          type: integer
      required:
      - badge_type
      - created_at
      - id
      - user
    AwardRequest:
      type: object
      properties:
        badge_type:
          allOf:
          - $ref: '#/components/schemas/BadgeTypeEnum'
          minimum: -2147483648
          maximum: 2147483647
        user:
          type: integer
      required:
      - badge_type
      - user
    BadgeTypeEnum:
      enum:
      - 0
      - 1
      - 2
      - 3
      - 4
      - 5
      type: integer
      description: |-
        * `0` - Egg Tooth
        * `1` - First Splash
        * `2` - Snap to It!
        * `3` - TailGATOR
        * `4` - Gator Done
        * `5` - Chomp Champ
    DepartmentEnum:
      enum:
      - MAS
      - CEN
      - COP
      type: string
      description: |-
        * `MAS` - MAS
        * `CEN` - CEN
        * `COP` - COP
    Group:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 50
        department:
          $ref: '#/components/schemas/DepartmentEnum'
        class_number:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - class_number
      - created_at
      - id
      - name
      - updated_at
    GroupComment:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        text:
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        user:
          type: integer
        group:
          type: integer
      required:
      - created_at
      - group
      - id
      - text
      - updated_at
      - user
    GroupCommentRequest:
      type: object
      properties:
        text:
          type: string
          minLength: 1
        user:
          type: integer
        group:
          type: integer
      required:
      - group
      - text
      - user
    GroupRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 50
        department:
          $ref: '#/components/schemas/DepartmentEnum'
        class_number:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
      required:
      - class_number
      - name
    Location:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        building:
          type: string
          maxLength: 50
        room:
          type: string
          maxLength: 50
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - building
      - created_at
      - id
      - latitude
      - longitude
      - room
      - updated_at
    LocationRequest:
      type: object
      properties:
        building:
          type: string
          minLength: 1
          maxLength: 50
        room:
          type: string
          minLength: 1
          maxLength: 50
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
      required:
      - building
      - latitude
      - longitude
      - room
    Meeting:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 50
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        group:
          type: integer
          nullable: true
        location:
          type: integer
      required:
      - created_at
      - end_time
      - id
      - location
      - name
      - start_time
      - updated_at
    MeetingComment:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        text:
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        user:
          type: integer
        meeting:
          type: integer
      required:
      - created_at
      - id
      - meeting
      - text
      - updated_at
      - user
    MeetingCommentRequest:
      type: object
      properties:
        text:
          type: string
          minLength: 1
        user:
          type: integer
        meeting:
          type: integer
      required:
      - meeting
      - text
      - user
    MeetingRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 50
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
        group:
          type: integer
          nullable: true
        location:
          type: integer
      required:
      - end_time
      - location
      - name
      - start_time
    Member:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        creator:
          type: boolean
        editor:
          type: boolean
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        user:
          type: integer
        group:
          type: integer
      required:
      - created_at
      - group
      - id
      - updated_at
      - user
    MemberRequest:
      type: object
      properties:
        creator:
          type: boolean
        editor:
          type: boolean
        user:
          type: integer
        group:
          type: integer
      required:
      - group
      - user
    PaginatedAttendeeList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page[number]=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page[number]=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Attendee'
    PaginatedAwardList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page[number]=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page[number]=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Award'
    PaginatedGroupCommentList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page[number]=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page[number]=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/GroupComment'
    PaginatedGroupList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page[number]=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page[number]=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Group'
    PaginatedLocationList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page[number]=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page[number]=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Location'
    PaginatedMeetingCommentList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page[number]=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page[number]=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/MeetingComment'
    PaginatedMeetingList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page[number]=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page[number]=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Meeting'
    PaginatedMemberList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page[number]=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page[number]=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Member'
    PaginatedUserList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page[number]=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page[number]=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/User'
    PatchedAttendeeRequest:
      type: object
      properties:
        rsvp_type:
          allOf:
          - $ref: '#/components/schemas/RsvpTypeEnum'
          minimum: -2147483648
          maximum: 2147483647
        checked_in:
          type: boolean
        creator:
          type: boolean
        editor:
          type: boolean
        user:
          type: integer
        meeting:
          type: integer
    PatchedAwardRequest:
      type: object
      properties:
        badge_type:
          allOf:
          - $ref: '#/components/schemas/BadgeTypeEnum'
          minimum: -2147483648
          maximum: 2147483647
        user:
          type: integer
    PatchedGroupCommentRequest:
      type: object
      properties:
        text:
          type: string
          minLength: 1
        user:
          type: integer
        group:
          type: integer
    PatchedGroupRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 50
        department:
          $ref: '#/components/schemas/DepartmentEnum'
        class_number:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
    PatchedLocationRequest:
      type: object
      properties:
        building:
          type: string
          minLength: 1
          maxLength: 50
        room:
          type: string
          minLength: 1
          maxLength: 50
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
    PatchedMeetingCommentRequest:
      type: object
      properties:
        text:
          type: string
          minLength: 1
        user:
          type: integer
        meeting:
          type: integer
    PatchedMeetingRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 50
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
        group:
          type: integer
          nullable: true
        location:
          type: integer
    PatchedMemberRequest:
      type: object
      properties:
        creator:
          type: boolean
        editor:
          type: boolean
        user:
          type: integer
        group:
          type: integer
    PatchedUserRequest:
      type: object
      properties:
        username:
          type: string
          minLength: 1
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        password:
          type: string
          writeOnly: true
          minLength: 1
          maxLength: 128
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
    RsvpTypeEnum:
      enum:
      - 0
      - 1
      - 2
      type: integer
      description: |-
        * `0` - Pending
        * `1` - Accepted
        * `2` - Declined
    User:
      type: object
      properties:
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        points:
          type: integer
          readOnly: true
        is_superuser:
          type: boolean
          readOnly: true
          title: Superuser status
          description: Designates that this user has all permissions without explicitly
            assigning them.
      required:
      - is_superuser
      - points
      - username
    UserRequest:
      type: object
      properties:
        username:
          type: string
          minLength: 1
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        password:
          type: string
          writeOnly: true
          minLength: 1
          maxLength: 128
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
      required:
      - password
      - username
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
servers:
- url: http://localhost:8000/api
